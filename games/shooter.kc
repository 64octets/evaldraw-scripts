#define DEBUG
static posx[16];
static posy[16];
static posz[16];

static onground[16];
static playerradi = .5;

static pdx[16];
static pdy[16];
static pdz[16];

static pvx[16];
static pvy[16];
static pvz[16];
static pax[16];
static pay[16];
static paz[16];

enum{MAX_BULLETS=64}
static bullet_x[16][MAX_BULLETS];
static bullet_y[16][MAX_BULLETS];
static bullet_z[16][MAX_BULLETS];
static bullet_vx[16][MAX_BULLETS];
static bullet_vy[16][MAX_BULLETS];
static bullet_vz[16][MAX_BULLETS];

static bullet_type[16][MAX_BULLETS];
static bullet_life[16][MAX_BULLETS];

enum{MAX_PARTICLES=128}
static particle_x[16][MAX_PARTICLES];
static particle_y[16][MAX_PARTICLES];
static particle_z[16][MAX_PARTICLES];
static particle_vx[16][MAX_PARTICLES];
static particle_vy[16][MAX_PARTICLES];
static particle_vz[16][MAX_PARTICLES];

static particle_type[16][MAX_PARTICLES];
static particle_life[16][MAX_PARTICLES];


static hang[16];
static vang[16];
static playercolor[16];
struct p3d_t{x,y,z;};

// LEVEL LOAD
static scalefactor = 3e4;
static num = 0;

struct point
{
   x,y,z;
};
struct coord{
   u,v;
}

enum{MAX_PTS = 1024*14}
static point Pts[MAX_PTS];
static coord coords[MAX_PTS];
static numPts = 0;

enum{MAX_NORMALS=MAX_PTS/3}
static point Normals[MAX_NORMALS];
static numNormals = 0;

// EOF LEVEL LOAD

static time, dt, oldtime;
()
{
   time = klock(0); dt = time - oldtime; oldtime = time;
   
   if(numframes==0)
   {
      loadfile();
      rotate_level();
      calcnormals();   

      r=255; g=0; b=0;
      for(i=0; i<16; i++){
         
         playercolor[i] = rgb(r,g,b);
         r += 100;
         if ( r>= 255 )
         {   
            r = 0;
            g += 100;
         }
         
         posx[i] = 5;
         posy[i] = -10;
         posz[i] = 0;

      }
      
   }

   glenable(GL_DEPTH_TEST);
   glcullface(GL_back);
   
   

   cls(255,255,255);
   clz(1e32);
   
   updateBullets();
   updateParticles();
   do_collision();
   

   dx = keystatus[30] - keystatus[32];
   dz = keystatus[17] - keystatus[31];
   dirx = sin(hang[net_me]) * dz;
   dirz = cos(hang[net_me]) * dz;
  
   dirx += sin(hang[net_me]+pi/2) * -dx;
   dirz += cos(hang[net_me]+pi/2) * -dx;
   
   len = sqrt(dirx^2 + dirz^2);
   if(len){
      dirx/=len; dirz/=len;
   }
   
   if(len) pdx[net_me] = dirx;
   
   if(len) pdz[net_me] = dirz;
   
   posx[net_me] += dirx * dt *5;
   posz[net_me] += dirz * dt *5;
   
   dy = keystatus[18] - keystatus[16];
   //posy[net_me] += dy * 5 * dt;
   
   //pdy[net_me] += 1*dt;
   //pdy[net_me] *= 0.9;
   //posy[net_me] += pdy[net_me];
   
   static jumpCooldown = 0;
   if( onground[net_me] )
   if (keystatus[57]  && jumpCooldown < time)
   {
      keystatus[57]=0;
      jumpcooldown = time + .1;
      pay[net_me] += -20 * 1/dt;
   }
   onground[net_me] = 0;
   
   
   pvx[net_me] += pax[net_me] * dt;
   pvy[net_me] += pay[net_me] * dt;
   pvz[net_me] += paz[net_me] * dt;
   
   posx[net_me] += pvx[net_me] * dt;
   posy[net_me] += pvy[net_me] * dt;
   posz[net_me] += pvz[net_me] * dt;
   
   d = 0.99;
   pvx[net_me] *= d;
   pvy[net_me] *= d;
   pvz[net_me] *= d;
   
   // Reset grav
   pay[net_me] = 20;

   mx=0; my=0;
   readmouse(mx,my);   

   for(i=0; i<net_players; i++)
   {
      //setcol(playercolor[i]);
      setcol(255,255,255);
      drawspr("duke.kv6", posx[i], posy[i]-1, posz[i], 1, hang[i] - pi, 0 );
      /*
      drawsph(posx[i], posy[i], posz[i], playerradi);
      drawcone(posx[i], posy[i], posz[i], .5,
               posx[i]+pdx[i], posy[i]+pdy[i], posz[i]+pdz[i], .1);
      */
   }
   drawlevel();
   //drawfloor();
   

 
   hang[net_me] += mx/100;
   vang[net_me] += my/100;
   r = 3;
   camx = posx[net_me] - sin(hang[net_me])*r;
   camy = posy[net_me]-3;
   camz = posz[net_me] - cos(hang[net_me])*r;
   setcam(camx,camy,camz, hang[net_me], vang[net_me] );

   setcol(0,0,0);
   drawsph(xres/2, yres/2, -4);
   /*
   r = .1;
   ox = cos(0) * r;
   oz = sin(0) * r;
   for(i=0; i<36; i++)
   {
      x = cos(0) * r;
      z = sin(0) * r;
      drawcone( ox,0,oz, .1,
                x, 0,y, .1);
      ox=x; oz=z;
   }   
   */
   
   static shootCooldown = 0;
   if( bstatus == 1 && shootCooldown < time)
   {
      shootCooldown = time + 0.05;
      setcol(0,0,0);
      r = 1;
      vx = sin( hang[net_me] ) * r;   
      vz = cos( hang[net_me] ) * r;

      moveto( posx[net_me], posy[net_me]-1, posz[net_me]);
      lineto( posx[net_me]+vx, posy[net_me]-1, posz[net_me]+vz);
      
      static mtx[9];
      ang2mat( hang[net_me], vang[net_me], mtx );

      spd = 33; // ms/s
      createBullet(
      camx+mtx[6],camy+mtx[7],camz+mtx[8],
      mtx[6]*spd, mtx[7]*spd, mtx[8]*spd,0);
   }

   
}

/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

do_collision()
{
   
   //for(i=0; i < num_players; i++)
   {
      //len = sqrt( pdx[i]^2 + pdy[i]^2 +pdz[i]^2   );
      //if( len==0 ) continue;

   player = net_me;
   p3d_t playerpos;
   playerpos.x = posx[player];
   playerpos.y = posy[player];
   playerpos.z = posz[player];
   
   p3d_t playerdir;
   playerdir.x = pdx[player];
   playerdir.y = pdy[player];
   playerdir.z = pdz[player];
   
   p3d_t offset;
   offset.x = 0;
   offset.y = 0;
   offset.z = 0;

      if( collideLevel(playerpos, playerdir, offset, playerradi, 0) )
      {
         onground[net_me] = 1;
         posx[player] += offset.x;
         posy[player] += offset.y;
         posz[player] += offset.z;
      }
   }
}

collideLevel( p3d_t playerpos, p3d_t vel, p3d_t collideOffset, radi, type )
{
   hasisected = 0;
   has_collided = 0;

   j=0;
   for(i=0; i<numpts; i+=3)
   {
      distance = 0;
      p3d_t tript;
      for(k=0; k<3; k++)
      {
      tript.x += pts[i+k].x;
      tript.y += pts[i+k].y;
      tript.z += pts[i+k].z;
      }
      tript.x /= 3;
      tript.y /= 3;
      tript.z /= 3;
      tript.x = pts[i+0].x;
      tript.y = pts[i+0].y;
      tript.z = pts[i+0].z;
      

      p3d_t norm;
      norm.x = normals[j].x;
      norm.y = normals[j].y;
      norm.z = normals[j].z;    
      
      #ifdef DEBUG
      nlen = length(norm);
      if( nlen < .9999 || nlen > 1.0001 )
      { 
         while(1) // evaldraw way of throwing a serious exception...
         {
            cls(255,0,0);
            setcol(255,255,255); moveto(0,0); printf("bad normals");
            refresh();
         }
      }
      #endif
        
         p3d_t tri[3];
         tri[0].x = pts[i+0].x;
         tri[0].y = pts[i+0].y;
         tri[0].z = pts[i+0].z;
         
         tri[1].x = pts[i+1].x;
         tri[1].y = pts[i+1].y;
         tri[1].z = pts[i+1].z;      
         
         tri[2].x = pts[i+2].x;
         tri[2].y = pts[i+2].y;
         tri[2].z = pts[i+2].z;

      isects = 0;
      isects = sphere_plane_intersect( 
            playerpos, 
            vel,
            norm, 
            tript,
            radi, distance );
            
      if(0)
      {
         hasisected=1;
         
         setcol(255,0,255);
         for(k=0; k<3; k++)
         {
            drawcone( tri[k].x, tri[k].y, tri[k].z, .1,
                      tri[ (k+1)%3 ].x, tri[ (k+1)%3 ].y, tri[ (k+1)%3 ].z, .1);
                   
         }
      }   
      
      #define TEST_POLY
      #ifdef TEST_POLY
      if ( isects )
      {
         p3d_t offset;
         offset.x = norm.x * distance;
         offset.y = norm.y * distance;
         offset.z = norm.z * distance;
         p3d_t isect;
         isect.x = playerpos.x - offset.x;
         isect.y = playerpos.y - offset.y;
         isect.z = playerpos.z - offset.z;    

         e=0;
         
         hitEdge=0;
         hitPoly = insidepolygon( isect, tri );
         if( !hitPoly )
           hitedge = EdgeSphereCollision( playerpos, tri, radi*.5, collideOffset,   e ) ;
         
         if( hitPoly  )
         {         
            //playercolor[player] = rgb( rnd*255, rnd*255, rnd*255 );
            
            if( hitEdge )
            {
                  setcol(255,0,255);
                  drawcone( tri[e].x, tri[e].y, tri[e].z, .1,
                            tri[ (e+1)%3 ].x, tri[ (e+1)%3 ].y, tri[ (e+1)%3 ].z, .1);
            }
            else
            {
               for(k=0; k<3; k++)
               {
                  setcol(255,0,0);
                  drawcone( tri[k].x, tri[k].y, tri[k].z, .1,
                            tri[ (k+1)%3 ].x, tri[ (k+1)%3 ].y, tri[ (k+1)%3 ].z, .1);
                            
               }
            }
            
            // Collision Response
            if (hitPoly)
            {
               has_collided = 1;

                  
               if ( distance > 0 )
               {
                  collideOffset.x += norm.x * (radi - distance);
                  collideOffset.y += norm.y * (radi - distance);
                  collideOffset.z += norm.z * (radi - distance);     
               }
               else // collided with back
               {
               
                  collideOffset.x += norm.x * -(radi + distance);
                  collideOffset.y += norm.y * -(radi + distance);
                  collideOffset.z += norm.z * -(radi + distance);             
               }
               
            }
    
         } // if in poly
       
       }   // if sphere_plane_isect
      #endif  
      
      
      j++;
   } // for tris
   
   return has_collided;
}



sphere_plane_intersect(p3d_t p, p3d_t v, p3d_t n, p3d_t pp, radi, &distance)
{
   d = -( (n.x*pp.x) + 
        (n.y*pp.y) + 
        (n.z*pp.z) );
   
   distance = n.x*p.x + 
              n.y*p.y + 
              n.z*p.z + d;
   
   if ( fabs(distance) < radi )
   {
      return 1; // isect
   }else if( distance >= radi )
   {
      return 0; // front of plane
   }
   return 0; // behind plane
   


   #ifdef NETTLE_FLIPCODE
   plane_dist = (nx*ppx) + (ny*ppy) + (nz*ppz);
   d = -plane_dist;
   

   numer = nx*px + ny*py + nz*pz + d;
   denom = nx*vx + ny*vy + nz*vz;

   distance = -(numer/denom);
   
   
   if ( fabs(distance) < radi )
   {
      return 1; // isect
   }
   return 0; // behind plane
   #endif
   
}


/*
sphere_triangle_collision(p3d_t pos, p3d_t dir, p3d_t tri[3], p3d_t norm, &t)
{
      p3d_t vec[2];
      vec[0].x = pos.x;
      vec[0].y = pos.y;
      vec[0].z = pos.z;
      
      vec[1].x = pos.x + dir.x;
      vec[1].y = pos.y + dir.y;
      vec[1].z = pos.z + dir.z;
      
   // (p3d_t poly[3], p3d_t myline[2], p3d_t polynormal, &t)
      t = 0;
      if ( IntersectedPolygon(tri, vec, norm, t ) || EdgeSphereCollision( pos, tri, radi*.5, norm ) )
      {
         return t;
      }
      
      return 0;
       
      
}
*/

drawlevel()
{
   #ifdef DRAW_VERTS
   setcol(0,0,0);  
   glBegin(GL_POINTS);
   for(i=0; i<numPts; i++)
   {
      drawsph( pts[i].x, pts[i].y , pts[i].z, .2);
      
   }
   #endif
   
   //glcullface(GL_NONE);
   gldisable(GL_ALPHA_TEST);
   
   j=0;
   h=glsettex("lightmap.png");
   xsiz = 0; ysiz = 0;
   getpicsiz("lightmap.png", xsiz, ysiz);
   for(i=0; i<numPts; i+=3)
   {
      #define SHOW_NORMALS
      #ifdef SHOW_NORMALS
         setcol(255,255,0);
         scale = .5;
         centx = (pts[i+0].x + pts[i+1].x + pts[i+2].x)/3;
         centy = (pts[i+0].y + pts[i+1].y + pts[i+2].y)/3;
         centz = (pts[i+0].z + pts[i+1].z + pts[i+2].z)/3;
         //moveto( centx, centy , centz );
         //lineto( centx + normals[j].x*scale, centy + normals[j].y*scale, centz + normals[j].z*scale );
      
         drawcone( centx, centy , centz, -.06, 
                   centx + normals[j].x*scale, centy + normals[j].y*scale, centz + normals[j].z*scale, 0.01);
      
      #endif
      
      #define WIREFRAME
      #ifdef WIREFRAME
         setcol(128,128,128);
         moveto( pts[i+0].x, pts[i+0].y , pts[i+0].z );
         lineto( pts[i+1].x, pts[i+1].y , pts[i+1].z );
         lineto( pts[i+2].x, pts[i+2].y , pts[i+2].z );
         lineto( pts[i+0].x, pts[i+0].y , pts[i+0].z );
      #else

      #endif
      
      #define DRAW_FILL
      #ifdef DRAW_FILL
      //setcol( 128+128*normals[j].x, 128+128*normals[j].y, 128+128*normals[j].z);
      c = 500;
      setcol(c,c,c);
         glBegin(GL_TRIANGLES); //
         gltexcoord(coords[i+0].u, coords[i+0].v); glVertex( pts[i+0].x, pts[i+0].y, pts[i+0].z);
         gltexcoord(coords[i+1].u, coords[i+1].v); glVertex( pts[i+1].x, pts[i+1].y, pts[i+1].z);
         gltexcoord(coords[i+2].u, coords[i+2].v); glVertex( pts[i+2].x, pts[i+2].y, pts[i+2].z);
         glEnd();      
      #endif
      j++;
   }
   glremovetex(h);
   setcol(0xffffff);
}


/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}

calcNormals()
{
   for(i=0; i<numPts; i+=3)
   {
      dx1 = pts[i+1].x - pts[i].x;
      dy1 = pts[i+1].y - pts[i].y;
      dz1 = pts[i+1].z - pts[i].z;
      
      dx2 = pts[i+2].x - pts[i].x;
      dy2 = pts[i+2].y - pts[i].y;
      dz2 = pts[i+2].z - pts[i].z;
      
      normals[numNormals].x = dy1 * dz2 - dz1 * dy2; 
      normals[numNormals].y = dz1 * dx2 - dx1 * dz2; 
      normals[numNormals].z = dx1 * dy2 - dy1 * dx2; 
      
      len = sqrt(normals[numNormals].x^2 +  normals[numNormals].y^2 + normals[numNormals].z^2);
      if(len)
      {
         normals[numNormals].x /= len;
         normals[numNormals].y /= len;
         normals[numNormals].z /= len;
      }
      

      numNormals++;
   }
}

rotate_level()
{
   a = 0;//pi;
   ca = cos(a);
   sa = sin(a);
   for(i=0; i<numPts; i++)
   {
      x = pts[i].y;
      y = pts[i].z;
      pts[i].y = ca * x - sa * y;
      pts[i].z = sa * x + ca * y;
      
      pts[i].y *= -1; // flip
      //pts[i].y -= 5;
      //dz1 = pts[i].z;
   }


}

loadFile()
{
   nums_read = 0;
   numPts = 0;   

   i=0;
   x=0; y=0;
   for(i=0; i<getfilsiz("level.txt"); i++)
   {
      if( numPts > MAX_PTS) break;
      
      c = fil("level.txt",i);
      if (c != 13) 
      if( c != '\n' ) 
      if( c != ';') 
      {         
         readSuccess = 0;
         myNum = readNum(i, readSuccess);
         
         texfactor = 1e5;

         if( readSuccess )
         {
            if(nums_read==0)
            {
               coords[numPts].u = (myNum / texfactor);
               nums_read++; 
               continue;
            }         
            if(nums_read==1)
            {
               coords[numPts].v = (myNum / texfactor);
               nums_read++; 
               continue;
            } 
           if(nums_read==2)
            {
               pts[numPts].x = myNum / scalefactor;
               nums_read++;
               continue;
            } 
            if(nums_read==3)
            {
               pts[numPts].y = myNum / scalefactor;
               nums_read++;
               continue;
            }          
            if(nums_read==4)
            {
               pts[numPts].z = myNum / scalefactor;
               nums_read = 0;
               numPts++;
               continue;
            } 
         } // read ok
      } //if not newline or return
   } // for each byte in file
   
   #ifdef debug_read
   cls(0);
   setcol(255,255,255);
   moveto(0,0);
   printf("%g, %g\n", max_pts, numpts);
   for(i=numpts-5; i<numpts; i++)
   {
      printf("%g, %g\n", coords[i].u, coords[i].v);
   }
   refresh();
   while(1){}
   #endif
}

readNum(&i, &readSuccess)
{
   charsRead = 0;
   static numBuf[10];
   isNegative = 0;

   
   c = fil("level.txt",i);
   while( c != 13 && c != '\n' && c != ' ' && c != ';' && i < getfilsiz("level.txt") )
   {    
      if(c == '-')
      {
         isNegative = 1;
      }
      else
      {
         if(c == '0') numBuf[charsRead] = 0;
         if(c == '1') numBuf[charsRead] = 1;
         if(c == '2') numBuf[charsRead] = 2;
         if(c == '3') numBuf[charsRead] = 3;
         if(c == '4') numBuf[charsRead] = 4;
         if(c == '5') numBuf[charsRead] = 5;
         if(c == '6') numBuf[charsRead] = 6;
         if(c == '7') numBuf[charsRead] = 7;
         if(c == '8') numBuf[charsRead] = 8;
         if(c == '9') numBuf[charsRead] = 9;
         charsRead++;
      }
      
      i++;
      c = fil("level.txt",i);
   }
   
   if(charsRead <= 0)
   {
      readSuccess = 0;
      return 0;
   }else{
      readSuccess = 1;
   }
   
   num = 0;
   place = charsRead-1;
   for(j = 0; j < charsRead; j++)
   {
      num += numBuf[j] * 10^place;
      place--;
   }
   if( isNegative ) num *= -1;
   return num;
}
set(p3d_t v,x,y,z)
{
   v.x = x; v.y = y; v.z = z;
}

linePlaneIntersection(p3d_t linePt, p3d_t lineVec, p3d_t planePt, p3d_t planeNormal, &t)
{
   d = dotProduct(lineVec,planeNormal); // u*n
   if( fabs(d) < 1e-7) return 0; // early escape. u and v are perpendicular and will never isect.
   p3d_t v; v.x = linePt.x - planePt.x; v.y = linePt.y - planePt.y; v.z = linePt.z - planePt.z; // p-q
   t = dotProduct(v,planeNormal) / d; // t = ((p-q)*n) / (u*n)
   return 1;
}

// returns 1 if collision, and changes t variabel, point on line for collision
// returns 0 if not collision
IntersectedPolygon(p3d_t poly[3], p3d_t myline[2], p3d_t polynormal, &t)
{
   p3d_t lineStart; 
   lineStart.x = myLine[0].x;
   lineStart.y = myLine[0].y;
   lineStart.z = myLine[0].z;
   
   p3d_t lineVec; 
   lineVec.x = myLine[0].x - myLine[1].x;
   lineVec.y = myLine[0].y - myLine[1].y;
   lineVec.z = myLine[0].z - myLine[1].z; 
   
   p3d_t planePt1; 
   planePt1.x = poly[0].x;
   planePt1.y = poly[0].y;
   planePt1.z = poly[0].z;
   
   hit = linePlaneIntersection( lineStart, lineVec, planePt1, polyNormal, t);
   if( hit )
   {
      if( t < 0 || t > 1) return 0;
      p3d_t isectPoint;
      
      // Linevec ble forstyrra, men gjor bare dotprodukt? :S
      lineVec.x = myLine[0].x - myLine[1].x;
      lineVec.y = myLine[0].y - myLine[1].y;
      lineVec.z = myLine[0].z - myLine[1].z;

      isectPoint.x = myLine[0].x - lineVec.x * (t);
      isectPoint.y = myLine[0].y - lineVec.y * (t);
      isectPoint.z = myLine[0].z - lineVec.z * (t);
      
      if(InsidePolygon(isectPoint,poly)==1)
      {
         return 1;
      }
   }
   return 0;
}


EdgeSphereCollision(p3d_t center, p3d_t poly[3], radius, p3d_t offset, &e)
{
   p3d_t vPoint;
   for(i = 0; i < 3; i++)
   {
      px=0; py=0; pz=0;
      ClosestPtOnLine( center.x, center.y, center.z, poly[i].x, poly[i].y, poly[i].z
            , poly[(i + 1) % 3].x, poly[(i + 1) % 3].y, poly[(i + 1) % 3].z,
            px,py,pz);
      distance = sqrt( (px-center.x)^2 + (py-center.y)^2 + (pz-center.z)^2 );
      
         
      if( fabs(distance) < radius) 
      {
         e = i;
         p3d_t normal;
         normal.x = center.x - px;
         normal.y = center.y - py;
         normal.z = center.z - pz;
 
         normalize(normal);
         
         /*
         offset.x += (radius - distance) *normal.x;
         offset.y += (radius - distance) *normal.y;
         offset.z += (radius - distance) *normal.z;        
         */
         
         return 1;
      }
   }

   return 0;
}

// http://www.blackpawn.com/texts/pointinpoly/default.html

InsidePolygon(p3d_t p,p3d_t poly[3])
{
   v0x = poly[2].x - poly[0].x;
   v0y = poly[2].y - poly[0].y;
   v0z = poly[2].z - poly[0].z;
   
   v1x = poly[1].x - poly[0].x;
   v1y = poly[1].y - poly[0].y;
   v1z = poly[1].z - poly[0].z;
   
   v2x = p.x - poly[0].x;
   v2y = p.y - poly[0].y;
   v2z = p.z - poly[0].z;
   
   dot00 = v0x*v0x + v0y*v0y + v0z*v0z;
   dot01 = v0x*v1x + v0y*v1y + v0z*v1z;
   dot02 = v0x*v2x + v0y*v2y + v0z*v2z;
   dot11 = v1x*v1x + v1y*v1y + v1z*v1z;
   dot12 = v1x*v2x + v1y*v2y + v1z*v2z;
   invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
   u = (dot11 * dot02 - dot01 * dot12) * invDenom;
   v = (dot00 * dot12 - dot01 * dot02) * invDenom;

   // Check if point is in triangle
   return (u > 0) && (v > 0) && ( (u + v) < 1);
}


/*
InsidePolygon(p3d_t isectPoint,p3d_t poly[3])
{
   MATCH_FACTOR = 0.99; // floatingpoint tolerance
   angle = 0.0;
   p3d_t vA;
   p3d_t vB;
   
   for(i=0; i<3; i++)
   {
      vA.x = poly[i].x - isectPoint.x;
      vA.y = poly[i].y - isectPoint.y;
      vA.z = poly[i].z - isectPoint.z;
      
      vB.x = poly[(i+1)%2].x - isectPoint.x;
      vB.y = poly[(i+1)%2].y - isectPoint.y;
      vB.z = poly[(i+1)%2].z - isectPoint.z;
      
      angle += angleBetweenVectors(vA,vB);
   }
   if(angle >= (MATCH_FACTOR * (2.0*PI) )) return 1;
   return 0;
}
*/
angleBetweenVectors(p3d_t a, p3d_t b)
{
   dpr = dotProduct(a,b);
   vecMagnitude = length(a)*length(b);
   if(vecMagnitude <= 1e-7) return 0;
   angle = acos( dpr/vecMagnitude );
   if( fabs(angle-dpr) <= 1e-7 ) return 0;
   //if( isNan(angle ) ) return 0; // angle may become NaN if dpr and magnitude are equal. ->acos(1)
   if( abs(angle) < 1e-7 ) return 0; // no isNan func in evaldraw.
   return angle; 
}

length(p3d_t v){
   return sqrt(v.x^2 + v.y^2 + v.z^2);
}

normalize(p3d_t v)
{
   len = sqrt(v.x^2 + v.y^2 + v.z^2); 
   if(len)
   {
      v.x/=len; v.y/=len; v.z/=len;
   }
}
dotProduct(p3d_t a, p3d_t b)
{
   return a.x*b.x + a.y*b.y + a.z*b.z;
}
cross(p3d_t a, p3d_t b, p3d_t out)
{
   out.x = a.y*b.z - a.z*b.y;
   out.y = a.z*b.x - a.x*b.z;
   out.z = a.x*b.y - a.y*b.x;
}

closestPtOnLine(px,py,pz, ax,ay,az, bx,by,bz, &cx,&cy,&cz)
{
   // from A to P
   apx = px - ax;
   apy = py - ay;
   apz = pz - az;
   // From A to B
   nx = bx-ax;
   ny = by-ay;
   nz = bz-az;
   // normalize Dir A to B
   distAB = sqrt( nx^2+ny^2+nz^2);
   if( distAB > 1e-7 ){
      nx/=distAB; ny/=distAB; nz/=distAB;
   }
   
   t = nx*apx + ny*apy + nz*apz; // proj v1 onto norm
   
   if( t<= 0){ // A is closest
      cx = ax; cy = ay; cz = az; return;
   }
   
   if( t>= distAB){ // B is closest
      cx = bx; cy = by; cz = bz; return;
   }
   
   // create new vec, closest pt
   v3x = ax + nx*t;
   v3y = ay + ny*t;
   v3z = az + nz*t;
   cx = v3x; cy = v3y; cz = v3z;   
}

updateBullets()
{
   setcol(255,255,255);
   for(i=0; i<MAX_BULLETS; i++)
   {
      if( bullet_life[net_me][i] > 0 )
      {
         p3d_t playerpos;
         playerpos.x = bullet_x[i];    
         playerpos.y = bullet_y[i];
         playerpos.z = bullet_z[i];

         p3d_t playerdir;
         playerdir.x = bullet_vx[i];    
         playerdir.y = bullet_vy[i];
         playerdir.z = bullet_vz[i];        

         p3d_t offset;
         if (collideLevel(playerpos, playerdir, offset, .3, 1) )
         {
            bullet_life[net_me][i] = 0;
            createParticle(bullet_x[i],bullet_y[i],bullet_z[i],
            0,0,0,0);
         }else{      

         bullet_life[net_me][i] -= dt;
         
         
         bullet_x[net_me][i] += bullet_vx[net_me][i] * dt;
         bullet_y[net_me][i] += bullet_vy[net_me][i] * dt;
         bullet_z[net_me][i] += bullet_vz[net_me][i] * dt;        
         
         static mtx[9];
         angle = 1;
         static rotAxis[3];
         rotAxis[0] = bullet_vx[net_me][i];
         rotAxis[1] = bullet_vy[net_me][i];
         rotAxis[2] = bullet_vz[net_me][i];
         //InitRotationMatrix(mtx,angle,rotAxis);
         
         //alignToVector( input[3], dir[3] )
         
         static to[3];
         to[0] = bullet_x[net_me][i] + bullet_vx[net_me][i];
         to[1] = bullet_y[net_me][i] + bullet_vy[net_me][i];
         to[2] = bullet_z[net_me][i] + bullet_vz[net_me][i];
         
         static from[3];
         from[0] = bullet_x[net_me][i];
         from[1] = bullet_y[net_me][i];
         from[2] = bullet_z[net_me][i];

         lookAt(mtx, to, from);

         drawspr("rpg.kv6", 
         bullet_x[net_me][i], bullet_y[net_me][i], bullet_z[net_me][i],
         mtx[0], mtx[1], mtx[2], 
         mtx[3], mtx[4], mtx[5],
         mtx[6], mtx[7], mtx[8]
         );
         
       
         }

         

      }
   }
}

createBullet(x,y,z,vx,vy,vz,type)
{
   for(i=0; i<MAX_BULLETS; i++)
   {
      if( bullet_life[net_me][i] <= 0 )
      {
         bullet_life[net_me][i] = 10;
         bullet_x[net_me][i] = x;
         bullet_y[net_me][i] = y;
         bullet_z[net_me][i] = z;
         
         bullet_vx[net_me][i] = vx;
         bullet_vy[net_me][i] = vy;
         bullet_vz[net_me][i] = vz;
         
         bullet_type[net_me][i] = type;
         return;
      }
   }

}


updateParticles()
{
   setcol(255,255,255);
   for(i=0; i<MAX_PARTICLES; i++)
   {
      if( particle_life[net_me][i] > 0 )
      {
         particle_life[net_me][i] -= dt;
         
         particle_x[net_me][i] += particle_vx[net_me][i] * dt;
         particle_y[net_me][i] += particle_vy[net_me][i] * dt;
         particle_z[net_me][i] += particle_vz[net_me][i] * dt;        
       
         setcol(255,255,0);
         drawsph(particle_x[net_me][i], particle_y[net_me][i], particle_z[net_me][i], .1);

      }
   }
}

createParticle(x,y,z,vx,vy,vz,type)
{
   for(i=0; i<MAX_PARTICLES; i++)
   {
      if( particle_life[net_me][i] <= 0 )
      {
         particle_life[net_me][i] = 20;
         particle_x[net_me][i] = x;
         particle_y[net_me][i] = y;
         particle_z[net_me][i] = z;
         
         particle_vx[net_me][i] = vx;
         particle_vy[net_me][i] = vy;
         particle_vz[net_me][i] = vz;
         
         particle_type[net_me][i] = type;
         return;
      }
   }

}

lookAt(mtx[9], pos[3],eye[3])
{
   static fwd[3];
   static up[3];
   static side[3];
   
   // find forward dir
   fwd[0] = pos[0]-eye[0];
   fwd[1] = pos[1]-eye[1];
   fwd[2] = pos[2]-eye[2];
   normalize(fwd);
   
   // find up vector as close to world up as possible
   
   static worldup[3];
   worldup[0] = 0;
   worldup[1] = -1;
   worldup[2] = 0;
   
   dotprod = vecDot(worldUp,fwd);
   static part2[3];
   part2[0] = fwd[0]*dotprod;
   part2[1] = fwd[1]*dotprod;
   part2[2] = fwd[2]*dotprod;
   
   up[0] = worldUp[0] - part2[0];
   up[1] = worldUp[1] - part2[1];
   up[2] = worldUp[2] - part2[2];
   normalize(up);

   static side[3];
   vecCross(fwd,up,side);
   normalize(side);
   
   mtx[0] = side[0]; mtx[1] = side[1]; mtx[2] = side[2];
   mtx[3] = up[0];   mtx[4] = up[1]; mtx[5] = up[2];
   mtx[6] = fwd[0]; mtx[7] = fwd[1]; mtx[8] = fwd[2];
}

vecdot(v1[3],v2[3]){
   return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
}

normalize(v[3]){
   l = sqrt(v[0]^2 + v[1]^2 + v[2]^2);
   if(l){
      v[0] /= l;
      v[1] /= l;
      v[2] /= l;
   }
}

veccross(v1[3], v2[3], vout[3])
{
   vout[0] = v1[1] * v2[2] - v1[2] * v2[1];
   vout[1] = v1[2] * v2[0] - v1[0] * v2[2];
   vout[2] = v1[0] * v2[1] - v1[1] * v2[0];
}

setVec(v[3],x,y,z)
{
   v[0] = x; v[1] = y; v[2] = z;
}

alignToVector( input[3], dir[3] )
{
   static rotAxis[3];
   cross( input, dir, rotAxis );
   angle = angleBetween( input, dir ) ;

   static mtx[9];
   InitRotationMatrix(mtx,angle,rotAxis);
   
   transformPoint(input,mtx);
}

InitRotationMatrix(Mtx[9],r,pAxis[3])
{
  // The axis vector must be of unit length
  x=0, y=0, z=0, m=0;
  m = sqrt(pAxis[0]*pAxis[0] + pAxis[1]*pAxis[1] + pAxis[2]*pAxis[2]);
  x = pAxis[0]/m;
  y = pAxis[1]/m;
  z = pAxis[2]/m;

  // Compute the rotation matrix  
  c = cos(r);
  s = sin(r);

  Mtx[0] = (x * x) * (1.0 - c) + c;
  Mtx[1] = (y * x) * (1.0 - c) + (z * s);
  Mtx[2] = (z * x) * (1.0 - c) - (y * s);

  Mtx[3] = (x * y) * (1.0 - c) - (z * s);
  Mtx[4] = (y * y) * (1.0 - c) + c;
  Mtx[5] = (z * y) * (1.0 - c) + (x * s);

  Mtx[6] = (x * z) * (1.0 - c) + (y * s);
  Mtx[7] = (y * z) * (1.0 - c) - (x * s);
  Mtx[8] = (z * z) * (1.0 - c) + c;
} 

angleBetween(v1[3], v2[3])
{
   ftol = 1e-7;
   if( fabs(v1[0]-v2[0]) < ftol || fabs(v1[1]-v2[1]) < ftol || fabs(v1[2]-v2[2]) < ftol) return 0;
   
   aLen = sqrt(v1[0]^2 + v1[1]^2 + v1[2]^2);
   bLen = sqrt(v2[0]^2 + v2[1]^2 + v2[2]^2);
   dotProd = dpr(v1,v2);
   return acos( dotProd / (aLen*bLen) );
}


dpr(v1[3], v2[3])
{
   return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];
}


cross(a[3],b[3],p[3])
{
   p[0] = a[1]*b[2] - b[1]*a[2]; // yz
   p[1] = a[2]*b[0] - b[2]*a[0]; // zx
   p[2] = a[0]*b[1] - b[0]*a[1]; // xy
}

transformPoint(v[3], thisRot[9])
{
   NewX = v[0] * thisRot[0] + v[1] * thisRot[1] + v[2] * thisRot[2];
   NewY = v[0] * thisRot[3] + v[1] * thisRot[4] + v[2] * thisRot[5];
   NewZ = v[0] * thisRot[6] + v[1] * thisRot[7] + v[2] * thisRot[8];
   v[0]=newx; v[1]=newy; v[2]=newz;
}

transformPoint(&x,&y,&z, thisRot[9])
{
   NewX = X * thisRot[0] + Y * thisRot[1] + Z * thisRot[2];
   NewY = X * thisRot[3] + Y * thisRot[4] + Z * thisRot[5];
   NewZ = X * thisRot[6] + Y * thisRot[7] + Z * thisRot[8];
   x=newx; y=newy; z=newz;
}