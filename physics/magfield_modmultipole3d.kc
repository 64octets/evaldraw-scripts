

enum{MAXPOLES = 15}

static worldSiz = 20;
static poleRadi = .5;

static poleX[MAXPOLES];
static poleY[MAXPOLES];
static poleZ[MAXPOLES];
static polarity[MAXPOLES];
static positivePole[MAXPOLES];
static positiveCount = 0;


static posx = 0;
static posy = 0;
static posz = -50;
static posh = 3.14; // left right
static posv = -3.14;
static mat[9]; 

()
{

  //cls(0x503070);
  clz(1e32);
  
  static toggleCls = 0;
  if( keystatus[2] && toggleCls == 0 )  // no cls-ing
  {
    keystatus[2] = 0;
    toggleCls = 1;
    cls(0x503070); // cls to get rid of floor
  }
  
  if( keystatus[2] && toggleCls == 1 ) // turn cls back on
  {
    keystatus[2] = 0;
    toggleCls = 0;
  }
  
  if(toggleCls==0)
  { 
    cls(0x503070); 
    // A floor of spheres so we can orient ourselves easier...
    setcol(64,64,64);
    for(i=-worldSiz; i<worldSiz; i++)
      for(j=-worldSiz; j<worldSiz; j++)
      drawsph(i,-worldSiz,j,poleRadi);
  }
  
  playercontrols();

  if(numframes==0)
  {
    
    // place poles randomly in space
     for(i=0; i<MAXPOLES; i++){
        poleX[i] = nrnd*(worldSiz/2);
        poleY[i] = nrnd*(worldSiz/2);
        poleZ[i] = nrnd*(worldSiz/2);
        polarity[i] = sgn(nrnd);
     }
     for(i=0; i<MAXPOLES; i++)
     {
        if(polarity[i] == 1)
        {
           positivePole[positiveCount] = i;
           positiveCount++;
        }
     }
     // If no poles are postive, set pole zero to +... or else all particles eventually get sucked up.
     if( positiveCount == 0 ){ polarity[0]=1; positivePole[positiveCount]=0; positiveCount=1; }
     
  }
  /*
  if (bstatus%2)
  {
     minDist = 1e32;
     closest = -1;
     
     for(i = 0; i<MAXPOLES; i++){
        dist = ((mousx-polex[i])^2 + (mousy-poley[i])^2 ); // < 16^2;
        if( dist < minDist ){
           minDist = dist;
           closest = i;  
        }
     }
     if(closest != -1){
        polex[closest] = mousx;
        poley[closest] = mousy;
     }
  }
  */
  {   
     enum {NUMP=4096}//8192 4096 2048 1024
     static px[NUMP], py[NUMP], pz[NUMP], otim;
     
     if (numframes==0 || keystatus[57])
     {
        j=0;
        for(i=0;i<NUMP;i++)
        {
           p = positivePole[j];
           px[i] = nrnd * worldSiz;
           py[i] = nrnd * worldSiz;
           pz[i] = nrnd * worldSiz;
           j++;//evaldraw handles out of bounds.
        }
        otim = klock(0);
     }
     
     tim = klock(0); dt = tim-otim; otim = tim;
     setcol(0xffffff);
     

  if (0)
  {
     static z=0;
     if(keystatus[3]){ z+=10*dt; if(z>worldSiz) z=worldSiz; }
     if(keystatus[4]){ z-=10*dt; if(z<-worldSiz) z=-worldSiz; }
     
     //for(z=-worldSiz; z<worldSiz; z+=5)
     for(y=-worldSiz;y<worldSiz;y+=1)
        for(x=-worldSiz;x<worldSiz;x+=1)
        {
           vx=0;
           vy=0;
           vz=0;
           // Sum velocity at point, using contribs from all poles.
           for(p1=0; p1<MAXPOLES; p1++)
           {
              x1 = poleX[p1]; y1 = poleY[p1]; z1 = poleZ[p1];
              dist1 = (x-x1)*(x-x1) + (y-y1)*(y-y1) + (z-z1)*(z-z1);
              nd = 1.0/dist1;
              vx += (x-x1)*nd*polarity[p1];
              vy += (y-y1)*nd*polarity[p1];
              vz += (z-z1)*nd*polarity[p1];
           }    
           vx /= MAXPOLES;
           vy /= MAXPOLES;
           vz /= MAXPOLES;
           f = 2.0/sqrt(vx*vx + vy*vy + vz*vz);
           vx *= f; vy *= f; vz *= f;   
           // Draw velocity vector from point in space.
           //setcol(0x804040);
           //setcol(0xff7f7f); 
           setcol(.3*f, 128+.1*f, .7*f);
           drawcone(x,y,z,.05,x+vx,y+vy,z+vz,0.01);
           //moveto(x,y,z);
           //lineto(x+vx,y+vy,z+vz);
        }
  }
  else
  {

     for(i=0;i<NUMP;i++)
     {
        x = px[i]; 
        y = py[i];
        z = pz[i];
        dead = 0;

        particleKillDist = worldSiz*4;
        if( x < -particleKillDist || x > particleKillDist ) dead = 1;
        if( y < -particleKillDist || y > particleKillDist ) dead = 1;
        if( z < -particleKillDist || z > particleKillDist ) dead = 1;
        
        
        /*if ((abs(x-hx) >= hx) || (abs(y-hy) >= hy))
        {
           //Select random point on border
           j = (xres+yres)*2*rnd;
                if (j < xres) { x = j; y = 0; }
           else if (j < xres*2)
              { x = j-xres; y = yres; }
           else if (j < xres*2+yres)
              { x = 0; y = j-xres*2; }
           else { x = xres; y = j-xres*2-yres; }
        }*/
          

        dist = 1e6;
        vx=0;
        vy=0;
        vz=0;
        if(dead==0)
        for(p1=0; p1<MAXPOLES; p1++)
        {
           if(dead)break;
           x1 = poleX[p1]; y1 = poleY[p1]; z1 = poleZ[p1];

           //dx = x1-x2; dy = y1-y2;
           //cx = (x1+x2)/2; cy = (y1+y2)/2;

           dist1 = (x-x1)^2 + (y-y1)^2 + (z-z1)^2;

           
           if( polarity[p1] == -1 && dist1 < 2*poleRadi){dead=1; break;}
       
           nd = 1.0/dist1;
           vx += (x-x1)*nd*polarity[p1];
           vy += (y-y1)*nd*polarity[p1];
           vz += (z-z1)*nd*polarity[p1];
        }      

        vx /= MAXPOLES;
        vy /= MAXPOLES;
        vz /= MAXPOLES;

        if(dead)
        {
           randPole = positivePole[int(rnd*positiveCount)]; // Choose a positive pole to spawn on.
           rx=0; ry=0; rz=0;
           randPointOnSphere(poleRadi,rx,ry,rz);
           px[i] = polex[randPole] + rx;
           py[i] = poley[randPole] + ry;
           pz[i] = polez[randPole] + rz;
        }
        else
        {
           d = sqrt(vx*vx+vy*vy+vz*vz);
           //if(d > 0.0) f = 5.0/d; else f = 1e-7;
           // Line length
           f = 2/d; 
           //setcol(64+rnd*128, 64+rnd*128, 128+rnd*128);
           //setcol(511-f*5,511,511-f*10);
           //setcol(2*f,1*f,0);
           setcol((i%72)*64+64,(i%80)+128,64);
           //drawsph(x,y,z,f*1e-2);
           moveto( x-vx*f, y-vy*f, z-vz*f); lineto( x+vx*f, y+vy*f, z+vz*f);
           //drawcone(x-vx*f, y-vy*f, z-vz*f, .08, x+vx*f, y+vy*f, z+vz*f,.08);
           
           f = 96*dt/d; // Speed 4,8,16
           x += vx*f;
           y += vy*f;
           z += vz*f;
           
           px[i] = x;
           py[i] = y;
           pz[i] = z;
        }
     }
  }
  }
  
  // Draw poles and their polarity.
  setcol(0xc0c0ff);
  setfont(12,16);
  
  for(i=0; i<MAXPOLES; i++)
  {
    if( polarity[i] == 1 ) setcol(255,0,0); else setcol(0,0,255);
    drawsph(poleX[i], poleY[i], poleZ[i], poleRadi);
  //  moveto( xres/2+xres*mat[0]*poleX[i]/worldSiz / -poleZ[i] , yres/2+yres*mat[1]*poleY[i]/worldSiz / -poleZ[i]); 
  //  if( polarity[i] == 1 ) printchar('+'); else printchar('-');
  }
  
}

random(lo,hi)
{
   range = hi-lo;
   return lo + rnd*range;
}

randPointOnSphere(radius,&x,&y,&z) {
  z = random(-radius, radius);
  radius_sq = radius * radius;
  zsq = z * z;
  theta = random(0, 2*PI);
  x = sqrt(radius_sq - zsq) * cos(theta);
  y = sqrt(radius_sq - zsq) * sin(theta);
}



/////////// CAM
// Camera and movement code taken from /games/
//Handle input and player movement
playercontrols()
{
   static oldMouseX;
   static oldMouseY;
   static mouseSpeedX;
   static mouseSpeedY; 

   f = .1;
   if (keystatus[0x2a]) f /= 4;
   if (keystatus[0x36]) f *= 4;
   vx = (keystatus[32]-keystatus[30])*f; //D-A
   vy = (keystatus[17]-keystatus[31])*f; //W-S  
   vz = 0;//(keystatus[0x52]-keystatus[0x9d])*f; //KP0-RCtrl
   
   
   ang2mat(posh,posv,mat); // Convert angles to rotation matrix
   
   // find new position
   posx += mat[0]*vx + mat[3]*vz + mat[6]*vy;
   posy += mat[1]*vx + mat[4]*vz + mat[7]*vy;
   posz += mat[2]*vx + mat[5]*vz + mat[8]*vy; 
   // mousespeed values are tweaked for 60 fps
   mouseSpeedX = (mousx - oldMouseX) * 0.01;
   mouseSpeedY = (mousy - oldMouseY) * 0.01;
   oldMouseX = mousx;
   oldMouseY = mousy;
   if(bstatus==1)
   {
      posh -= mouseSpeedX;
      posv += mouseSpeedY;
   }
   // Right,down,forwards unit vectors.
   setcam(posx,posy,posz,
          mat[0],mat[1],mat[2],
          mat[3],mat[4],mat[5],
          mat[6],mat[7],mat[8]);
}
/* converts horizontal and vertical angles to a 3x3 rotation matrix */
ang2mat(hang,vang,mat[9])
{
   mat[0] = cos(hang); mat[1] = 0; mat[2]=-sin(hang);
   mat[6] = cos(vang)*sin(hang); mat[7] = sin(vang); mat[8]=cos(vang)*cos(hang);
   mat[3] = mat[7]*mat[2] - mat[8]*mat[1];
   mat[4] = mat[8]*mat[0] - mat[6]*mat[2];
   mat[5] = mat[6]*mat[1] - mat[7]*mat[0];
}